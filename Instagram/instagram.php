<?php
/**
 * A PHP wrapper class for Instagram's API
 */
class Instagram {
    /**
     * URL to the Instagram's OAUTH
     */
    const API_OAUTH_URI = 'https://api.instagram.com/oauth/authorize';

    /**
     * URL to Instagrams OAUTH access token
     */
    const API_OAUTH_TOKEN_URI = 'https://api.instagram.com/oauth/access_token';

    /**
     * URL to Instagram's API
     */
    const API_URI = 'https://api.instagram.com/v1/';

    /**
     * Holds the client id provided by Instagram
     * @var string
     */
    private $_clientID;

    /**
     * Holds the client secret provided by instagram
     * @var string
     */
    private $_clientSecret;

    /**
     * Holds the callback path which is set when registering your instagram app
     * @var string
     */
    private $_redirectURI;

    /**
     * Can exist of one (or combination) of these strings [basic, likes, comments, relationships]
     * @var array
     */
    private $_scope;

    /**
     * Holds the access data returned by Instagram
     * @var [type]
     */
    private $_accessData;

    /**
     * The access token
     * @var string
     */
    private $_accessToken;

    /**
     * The constructor
     * @param string $clientID     The client id
     * @param string $clientSecret The client secret
     * @param string $redirectURI  The redirect URI
     * @param array  $scope        The scope parameters
     * @throws Exception If any of the parameters are null or empty
     */
    public function __construct($clientID, $clientSecret, $redirectURI, array $scope ) {
        if(empty($clientID)) throw new Exception("The client ID is empty");
        if(empty($clientSecret)) throw new Exception("The client secret is empty");
        if(empty($redirectURI)) throw new Exception("The redirect URI is empty");
        if(empty($scope)) throw new Exception("The scope is empty");

        $this->_accessData = "";
        $this->_clientID = $clientID;
        $this->_clientSecret = $clientSecret;
        $this->_redirectURI = $redirectURI;
        $this->_scope = $scope;
        $this->_accessToken = "";
    }

    /**
     * Generates URL to the OAUTH login
     * @return URL
     */
    public function getOAuthURI() {
        return self::API_OAUTH_URI . '?client_id=' . $this->_clientID . '&redirect_uri=' . $this->_redirectURI . '&scope=' . implode('+', $this->_scope) . '&response_type=code';
    }

    /**
     * Returns the access token provided by Instagram
     * @return string The access token
     * @throws Exception If access data is null in the class. To avoid exception call getAccessData
     */
    public function getAccessToken() {
        if(empty($this->_accessToken) && isset($this->_accessData)) {
            $this->_accessToken = $this->_accessData->access_token;
        }
        return($this->_accessToken);
    }

    /**
     * Sets the access token
     * @param $accessToken
     */
    public function setAccessToken($accessToken){
        $this->_accessToken = $accessToken;
    }

    /**
     * Gets the username
     * @return string
     * @throws Exception If access data is null in the class. To avoid exception call getAccessData
     */
    public function getUserName() {
        $this->throwExceptionWhenAccessDataIsEmpty();
        return($this->_accessData->user->username);
    }

    /**
     * Returns the user id
     * @return string
     * @throws Exception If access data is null in the class. To avoid exception call getAccessData
     */
    public function getUserId() {
        $this->throwExceptionWhenAccessDataIsEmpty();
        return($this->_accessData->user->id);
    }

    /**
     * Returns URL of the user's profile picture
     * @return URL
     * @throws Exception If access data is null in the class. To avoid exception call getAccessData
     */
    public function getUserProfilePicture() {
        $this->throwExceptionWhenAccessDataIsEmpty();
        return($this->_accessData->user->profile_picture);
    }

    /**
     * Gets the access data from Instagram's server
     * @param  string $appCode The code that has been generated by Instagram in the callback
     * @return mixed The access data  (stdClass)
     * @throws Exception If the call to the server was not successful
     */
    public function getAccessData($appCode) {
        $apiData = array(
            'grant_type'      => 'authorization_code',
            'client_id'       => $this->_clientID,
            'client_secret'   => $this->_clientSecret,
            'redirect_uri'    => $this->_redirectURI,
            'code'            => $appCode
        );

        try{
            $this->_accessData = $this->makeOAuthCall($apiData);
        } catch(Exception $e) {
            throw new Exception($e->getMessage());
        }

        $this->_accessToken = $this->_accessData->access_token;
        return ($this->_accessData);
    }

    /**
     * Sets the access data
     * @param $accessData The StdObject retrieved from Instagram
     */
    public function setAccessData($accessData) {
        $this->_accessData = $accessData;
    }
    /**
     * A custom method for doing cURL calls to Instagram's OAUTH
     * @param  mixed $apiData  Parameters to pass to Instagram's OAUTH
     * @return mixed JSON-decoded data  (stdClass)     
     */
    private function makeOAuthCall($apiData) {
        $apiHost = self::API_OAUTH_TOKEN_URI;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $apiHost);
        curl_setopt($ch, CURLOPT_POST, count($apiData));
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($apiData));
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        $jsonData = curl_exec($ch);
        if ($jsonData == false) {
            throw new Exception("Error: makeOAuthCall() - cURL error: " . curl_error($ch));
        }
        curl_close($ch);

        return json_decode($jsonData);
    }

    /**
     * Like a media 
     * @param  mixed $id The media's id
     * @return mixed JSON-decoded data (stdClass)
     */
    public function likeMedia($id) {
        return $this->makeCall('media/' . $id . '/likes', true, null, 'POST');
    }

    /**
     * Unlike a media
     * @param  mixed $id A media id to unlike
     * @return mixed JSON-decoded data (stdClass)
     */
    public function unlikeMedia($id) {
        return $this->makeCall('media/' . $id . '/likes', true, null, 'DELETE');
    }

    /**
     * Comment a media on instagram
     * @param  mixed $id The media's id
     * @param  string $text The comment text
     * @return mixed JSON-decoded data (stdClass)
     */
    public function commentMedia($id, $text) {
        return $this->makeCall('media/' . $id . '/comments', true, array('text' => $text), 'POST');
    }

    /**
     * Gets the media's comments
     * @param $id The media's id
     * @return mixed JSON-decoded data (stdClass)
     */
    public function getMediaComments($id) {
        return $this->makeCall('media/' . $id . '/comments', false);
    }

    /**
     * Get media by id
     * @param $id Media ID
     * @return mixed JSON-decoded data (stdClass)
     */
    public function getMedia($id) {
        return $this->makeCall('media/' . $id);
    }

    /**
     * Delete a media comment
     * @param $id The media's id
     * @param $commentID The comment's id
     * @return mixed JSON-decoded data (stdClass)
     */
    public function deleteMediaComment($id, $commentID) {
        $this->throwExceptionWhenAccessTokenIsEmpty();

        return $this->makeCall('media/' . $id . '/comments/' . $commentID, true, null, 'DELETE');
    }

    /**
     * Makes a call to Instagram's API
     * @param  mixed  $function Instagram's endpoints
     * @param  boolean $auth    Requires authorization or not.
     * @param  mixed  $params   The parameters to pass
     * @param  string $method   Which method to use
     * @return mixed JSON-decoded data (stdClass)
     */
    private function makeCall($function, $auth = false, $params = null, $method = 'GET') {
        if (false == $auth) {
            $authMethod = '?client_id=' . $this->_clientID;
        } else {
            if ($this->getAccessToken() != "" ) {
                $authMethod = '?access_token=' . $this->getAccessToken();
            } else {
                throw new Exception("Error: makeCall() | $function - This method requires an authenticated users access token.");
            }
        }

        if (isset($params) && is_array($params)) {
            $paramString = '&' . http_build_query($params);
        } else {
            $paramString = null;
        }

        $apiCall = self::API_URI . $function . $authMethod . (($method == 'GET') ? $paramString : null);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $apiCall);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        if ($method == 'POST') {
            curl_setopt($ch, CURLOPT_POST, count($params));
            curl_setopt($ch, CURLOPT_POSTFIELDS, ltrim($paramString, '&'));
        } else if ($method == 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        }

        $jsonData = curl_exec($ch);
        if ($jsonData == false) {
            throw new Exception("Error: makeCall() - cURL error: " . curl_error($ch));
        }
        curl_close($ch);

        return json_decode($jsonData);
    }

    /**
     * Gets the user's recent media on Instagram
     * @param  string  $id      The user id
     * @param  integer $limit   0 = 20 latest posts. -1 = all posts
     * @return mixed JSON-decoded data (stdClass)
     */
    public function getUserMedia($id = 'self', $limit = 0) {
        return $this->makeCall('users/' . $id . '/media/recent', true, array('count' => $limit));
    }

    /**
     * Gets the user's information on Instagram
     * @param  string $id [description]
     * @return mixed JSON-decoded data (stdClass)
     */
    public function getUserInfo($id = 'self') {
        return $this->makeCall('users/'. $id, true);
    }

    /**
     * Throw Exception when access token is empty
     * @throws Exception
     */
    private function throwExceptionWhenAccessTokenIsEmpty() {
        if($this->getAccessToken() == "") {
            throw new Exception("There is no access token available.");
        }
    }

    /**
     * Throws exception when the access data object is empty
     * @throws Exception
     */
    private function throwExceptionWhenAccessDataIsEmpty() {
        if(empty($this->_accessData)) {
            throw new Exception("The Access data is empty. Call getAccessData()");
        }
    }
}
?>